// ================================================
// * Functions
// ================================================

//== Colors
@function c($options...) {
  $color: $colors-map;
  $option-length: length($options);

  @if($option-length == 1) {
    $get-key: nth($options, $option-length);
    @return map-get($color, $get-key);
  }

  @each $option in $options {
    $color: map-get($color, $option);
  }

  @return $color;
}


//== URL Replacement
@function ur($img-path) {
  $result: $img-path;
  @if($url-replacement) {
    $result: $url-replacement + $img-path;
  }

  @return url(#{$result});
}



//== z-index
@function z($options...) {
  $option-length: length($options);
  $is-index: 1;

  $temp-map: $z-map;
  $get-key: nth($options, $option-length);

  @if($option-length > 1) {
    @each $option in $options {
      @if($option != $get-key) {
        $temp-map: map-get($temp-map, $option);
      }
    }
  }

  @if($libsass-version > 3.4 or $ruby-sass) {

    $get-value: map-get($temp-map, $get-key);
    $is-index: index($temp-map, ($get-key $get-value));

  } @else {

    $counter: 1;
    @each $map-key, $map-value in $temp-map {
      @if $map-key == $get-key {
        $is-index: $counter;
      }
      $counter: $counter + 1;
    }    

  } 

  @return $is-index;
}


//== *sRGB
@function xsRGB($color) {
  $xsRGB: $color / 255;

  @if($xsRGB <= 0.03928) {
    $xsRGB: $xsRGB / 12.92;
  } @else {
    $xsRGB: pow((($xsRGB + 0.055) / 1.055), 2.4);
  }
  @debug 'xsRGB: #{$xsRGB}';

  @return $xsRGB;
}

//== Luminance
@function luminance($color) {

  $R: xsRGB(red($color));
  $G: xsRGB(green($color));
  $B: xsRGB(blue($color));

  @return (0.2126 * $R) + (0.7152 * $G) + (0.0722 * $B);
}